/* Generated by D:\DEPSRC\DEPSRC\openDDS-v100\Win32\dds\bin\opendds_idl version 3.12 (ACE version 6.2a_p12) running on input file DataExchange.idl */
#include "DataExchangeTypeSupportImpl.h"

#include <cstring>
#include <stdexcept>
#include "dds/DCPS/BuiltInTopicUtils.h"
#include "dds/DCPS/ContentFilteredTopicImpl.h"
#include "dds/DCPS/DataReaderImpl_T.h"
#include "dds/DCPS/DataWriterImpl_T.h"
#include "dds/DCPS/FilterEvaluator.h"
#include "dds/DCPS/MultiTopicDataReader_T.h"
#include "dds/DCPS/PoolAllocator.h"
#include "dds/DCPS/PublicationInstance.h"
#include "dds/DCPS/PublisherImpl.h"
#include "dds/DCPS/Qos_Helper.h"
#include "dds/DCPS/RakeData.h"
#include "dds/DCPS/RakeResults_T.h"
#include "dds/DCPS/ReceivedDataElementList.h"
#include "dds/DCPS/Registered_Data_Types.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/SubscriberImpl.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/debug.h"
#include "dds/DdsDcpsDomainC.h"
#include "dds/CorbaSeq/CharSeqTypeSupportImpl.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: StringSeq */


/* End TYPEDEF: StringSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: LongSeq */


/* End TYPEDEF: LongSeq */

/* End MODULE: CORBA */


/* Begin MODULE: DDS */



/* Begin TYPEDEF: StringSeq */


/* End TYPEDEF: StringSeq */


/* Begin TYPEDEF: InstanceHandle_t */


/* End TYPEDEF: InstanceHandle_t */


/* Begin TYPEDEF: BuiltinTopicKeyValue */


/* End TYPEDEF: BuiltinTopicKeyValue */


/* Begin TYPEDEF: InstanceHandleSeq */


/* End TYPEDEF: InstanceHandleSeq */


/* Begin TYPEDEF: QosPolicyId_t */


/* End TYPEDEF: QosPolicyId_t */


/* Begin STRUCT: QosPolicyCount */


/* End STRUCT: QosPolicyCount */


/* Begin TYPEDEF: QosPolicyCountSeq */


/* End TYPEDEF: QosPolicyCountSeq */


/* Begin TYPEDEF: OctetSeq */


/* End TYPEDEF: OctetSeq */


/* Begin STRUCT: Duration_t */


/* End STRUCT: Duration_t */


/* Begin CONST: DURATION_INFINITE_SEC */


/* End CONST: DURATION_INFINITE_SEC */


/* Begin CONST: DURATION_INFINITE_NSEC */


/* End CONST: DURATION_INFINITE_NSEC */


/* Begin CONST: DURATION_ZERO_SEC */


/* End CONST: DURATION_ZERO_SEC */


/* Begin CONST: DURATION_ZERO_NSEC */


/* End CONST: DURATION_ZERO_NSEC */


/* Begin STRUCT: UserDataQosPolicy */


/* End STRUCT: UserDataQosPolicy */


/* Begin STRUCT: GroupDataQosPolicy */


/* End STRUCT: GroupDataQosPolicy */


/* Begin STRUCT: TopicDataQosPolicy */


/* End STRUCT: TopicDataQosPolicy */


/* Begin STRUCT: PartitionQosPolicy */


/* End STRUCT: PartitionQosPolicy */


/* Begin ENUM: HistoryQosPolicyKind */


/* End ENUM: HistoryQosPolicyKind */


/* Begin ENUM: DurabilityQosPolicyKind */


/* End ENUM: DurabilityQosPolicyKind */


/* Begin STRUCT: DurabilityQosPolicy */


/* End STRUCT: DurabilityQosPolicy */


/* Begin STRUCT: DurabilityServiceQosPolicy */


/* End STRUCT: DurabilityServiceQosPolicy */


/* Begin STRUCT: DeadlineQosPolicy */


/* End STRUCT: DeadlineQosPolicy */


/* Begin STRUCT: LatencyBudgetQosPolicy */


/* End STRUCT: LatencyBudgetQosPolicy */


/* Begin ENUM: LivelinessQosPolicyKind */


/* End ENUM: LivelinessQosPolicyKind */


/* Begin STRUCT: LivelinessQosPolicy */


/* End STRUCT: LivelinessQosPolicy */


/* Begin ENUM: ReliabilityQosPolicyKind */


/* End ENUM: ReliabilityQosPolicyKind */


/* Begin STRUCT: ReliabilityQosPolicy */


/* End STRUCT: ReliabilityQosPolicy */


/* Begin ENUM: DestinationOrderQosPolicyKind */


/* End ENUM: DestinationOrderQosPolicyKind */


/* Begin STRUCT: DestinationOrderQosPolicy */


/* End STRUCT: DestinationOrderQosPolicy */


/* Begin STRUCT: HistoryQosPolicy */


/* End STRUCT: HistoryQosPolicy */


/* Begin STRUCT: ResourceLimitsQosPolicy */


/* End STRUCT: ResourceLimitsQosPolicy */


/* Begin STRUCT: TransportPriorityQosPolicy */


/* End STRUCT: TransportPriorityQosPolicy */


/* Begin STRUCT: LifespanQosPolicy */


/* End STRUCT: LifespanQosPolicy */


/* Begin ENUM: OwnershipQosPolicyKind */


/* End ENUM: OwnershipQosPolicyKind */


/* Begin STRUCT: OwnershipQosPolicy */


/* End STRUCT: OwnershipQosPolicy */


/* Begin STRUCT: OwnershipStrengthQosPolicy */


/* End STRUCT: OwnershipStrengthQosPolicy */


/* Begin ENUM: PresentationQosPolicyAccessScopeKind */


/* End ENUM: PresentationQosPolicyAccessScopeKind */


/* Begin STRUCT: PresentationQosPolicy */


/* End STRUCT: PresentationQosPolicy */


/* Begin STRUCT: TimeBasedFilterQosPolicy */


/* End STRUCT: TimeBasedFilterQosPolicy */


/* Begin STRUCT: TopicQos */


/* End STRUCT: TopicQos */


/* Begin STRUCT: WriterDataLifecycleQosPolicy */


/* End STRUCT: WriterDataLifecycleQosPolicy */


/* Begin STRUCT: DataWriterQos */


/* End STRUCT: DataWriterQos */


/* Begin STRUCT: EntityFactoryQosPolicy */


/* End STRUCT: EntityFactoryQosPolicy */


/* Begin STRUCT: PublisherQos */


/* End STRUCT: PublisherQos */


/* Begin STRUCT: ReaderDataLifecycleQosPolicy */


/* End STRUCT: ReaderDataLifecycleQosPolicy */


/* Begin STRUCT: DataReaderQos */


/* End STRUCT: DataReaderQos */


/* Begin STRUCT: SubscriberQos */


/* End STRUCT: SubscriberQos */


/* Begin STRUCT: DomainParticipantFactoryQos */


/* End STRUCT: DomainParticipantFactoryQos */


/* Begin STRUCT: DomainParticipantQos */


/* End STRUCT: DomainParticipantQos */


/* Begin STRUCT: BuiltinTopicKey_t */


/* End STRUCT: BuiltinTopicKey_t */


/* Begin STRUCT: ParticipantBuiltinTopicData */


/* End STRUCT: ParticipantBuiltinTopicData */


/* Begin STRUCT: PublicationBuiltinTopicData */


/* End STRUCT: PublicationBuiltinTopicData */


/* Begin STRUCT: SubscriptionBuiltinTopicData */


/* End STRUCT: SubscriptionBuiltinTopicData */


/* Begin STRUCT: TopicBuiltinTopicData */


/* End STRUCT: TopicBuiltinTopicData */


/* Begin TYPEDEF: SampleStateKind */


/* End TYPEDEF: SampleStateKind */


/* Begin CONST: READ_SAMPLE_STATE */


/* End CONST: READ_SAMPLE_STATE */


/* Begin CONST: NOT_READ_SAMPLE_STATE */


/* End CONST: NOT_READ_SAMPLE_STATE */


/* Begin TYPEDEF: SampleStateMask */


/* End TYPEDEF: SampleStateMask */


/* Begin CONST: ANY_SAMPLE_STATE */


/* End CONST: ANY_SAMPLE_STATE */


/* Begin TYPEDEF: ViewStateKind */


/* End TYPEDEF: ViewStateKind */


/* Begin CONST: NEW_VIEW_STATE */


/* End CONST: NEW_VIEW_STATE */


/* Begin CONST: NOT_NEW_VIEW_STATE */


/* End CONST: NOT_NEW_VIEW_STATE */


/* Begin TYPEDEF: ViewStateMask */


/* End TYPEDEF: ViewStateMask */


/* Begin CONST: ANY_VIEW_STATE */


/* End CONST: ANY_VIEW_STATE */


/* Begin TYPEDEF: InstanceStateKind */


/* End TYPEDEF: InstanceStateKind */


/* Begin CONST: ALIVE_INSTANCE_STATE */


/* End CONST: ALIVE_INSTANCE_STATE */


/* Begin CONST: NOT_ALIVE_DISPOSED_INSTANCE_STATE */


/* End CONST: NOT_ALIVE_DISPOSED_INSTANCE_STATE */


/* Begin CONST: NOT_ALIVE_NO_WRITERS_INSTANCE_STATE */


/* End CONST: NOT_ALIVE_NO_WRITERS_INSTANCE_STATE */


/* Begin TYPEDEF: InstanceStateMask */


/* End TYPEDEF: InstanceStateMask */


/* Begin CONST: ANY_INSTANCE_STATE */


/* End CONST: ANY_INSTANCE_STATE */


/* Begin CONST: NOT_ALIVE_INSTANCE_STATE */


/* End CONST: NOT_ALIVE_INSTANCE_STATE */


/* Begin STRUCT: Time_t */


/* End STRUCT: Time_t */


/* Begin CONST: TIME_INVALID_SEC */


/* End CONST: TIME_INVALID_SEC */


/* Begin CONST: TIME_INVALID_NSEC */


/* End CONST: TIME_INVALID_NSEC */


/* Begin STRUCT: SampleInfo */


/* End STRUCT: SampleInfo */


/* Begin TYPEDEF: SampleInfoSeq */


/* End TYPEDEF: SampleInfoSeq */

/* End MODULE: DDS */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: CharSeq */


/* End TYPEDEF: CharSeq */

/* End MODULE: CORBA */


/* Begin MODULE: Data_Exchange_Platform */



/* Begin STRUCT: ObjectAttribute */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Data_Exchange_Platform::ObjectAttribute& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.instanceName.in()) + 1;
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.className.in()) + 1;
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.attributeName.in()) + 1;
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.attributeType.in()) + 1;
  gen_find_size(stru.attributeValue, size, padding);
}

bool operator<<(Serializer& strm, const Data_Exchange_Platform::ObjectAttribute& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.instanceName.in())
    && (strm << stru.className.in())
    && (strm << stru.attributeName.in())
    && (strm << stru.attributeType.in())
    && (strm << stru.attributeValue);
}

bool operator>>(Serializer& strm, Data_Exchange_Platform::ObjectAttribute& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.instanceName.out())
    && (strm >> stru.className.out())
    && (strm >> stru.attributeName.out())
    && (strm >> stru.attributeType.out())
    && (strm >> stru.attributeValue);
}

size_t gen_max_marshaled_size(const Data_Exchange_Platform::ObjectAttribute& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

size_t gen_max_marshaled_size(KeyOnly<const Data_Exchange_Platform::ObjectAttribute> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

void gen_find_size(KeyOnly<const Data_Exchange_Platform::ObjectAttribute> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.t.instanceName.in()) + 1;
}

bool operator<<(Serializer& strm, KeyOnly<const Data_Exchange_Platform::ObjectAttribute> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.t.instanceName.in());
}

bool operator>>(Serializer& strm, KeyOnly<Data_Exchange_Platform::ObjectAttribute> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.t.instanceName.out());
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Data_Exchange_Platform {
::DDS::DataWriter_ptr ObjectAttributeTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<ObjectAttribute> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}
::DDS::DataReader_ptr ObjectAttributeTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<ObjectAttribute> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}
#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr ObjectAttributeTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<ObjectAttribute> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<ObjectAttribute, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& ObjectAttributeTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<ObjectAttribute>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
bool ObjectAttributeTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}
const char* ObjectAttributeTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}
ObjectAttributeTypeSupport::_ptr_type ObjectAttributeTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<Data_Exchange_Platform::ObjectAttribute> : MetaStruct {
  typedef Data_Exchange_Platform::ObjectAttribute T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }
  size_t numDcpsKeys() const { return 1; }
#endif /* OPENDDS_NO_MULTI_TOPIC */

  Value getValue(const void* stru, const char* field) const
  {
    const Data_Exchange_Platform::ObjectAttribute& typed = *static_cast<const Data_Exchange_Platform::ObjectAttribute*>(stru);
    if (std::strcmp(field, "instanceName") == 0) {
      return typed.instanceName.in();
    }
    if (std::strcmp(field, "className") == 0) {
      return typed.className.in();
    }
    if (std::strcmp(field, "attributeName") == 0) {
      return typed.attributeName.in();
    }
    if (std::strcmp(field, "attributeType") == 0) {
      return typed.attributeType.in();
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Data_Exchange_Platform::ObjectAttribute)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "instanceName") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'instanceName' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'instanceName' length could not be deserialized");
      }
      if (!ser.skip(len)) {
        throw std::runtime_error("String 'instanceName' contents could not be skipped");
      }
    }
    if (std::strcmp(field, "className") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'className' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'className' length could not be deserialized");
      }
      if (!ser.skip(len)) {
        throw std::runtime_error("String 'className' contents could not be skipped");
      }
    }
    if (std::strcmp(field, "attributeName") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'attributeName' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'attributeName' length could not be deserialized");
      }
      if (!ser.skip(len)) {
        throw std::runtime_error("String 'attributeName' contents could not be skipped");
      }
    }
    if (std::strcmp(field, "attributeType") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'attributeType' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'attributeType' length could not be deserialized");
      }
      if (!ser.skip(len)) {
        throw std::runtime_error("String 'attributeType' contents could not be skipped");
      }
    }
    if (!gen_skip_over(ser, static_cast<CORBA::CharSeq*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct Data_Exchange_Platform::ObjectAttribute");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "instanceName") == 0) {
      return make_field_cmp(&T::instanceName, next);
    }
    if (std::strcmp(field, "className") == 0) {
      return make_field_cmp(&T::className, next);
    }
    if (std::strcmp(field, "attributeName") == 0) {
      return make_field_cmp(&T::attributeName, next);
    }
    if (std::strcmp(field, "attributeType") == 0) {
      return make_field_cmp(&T::attributeType, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Data_Exchange_Platform::ObjectAttribute)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"instanceName", "className", "attributeName", "attributeType", "attributeValue", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "instanceName") == 0) {
      return &static_cast<const T*>(stru)->instanceName;
    }
    if (std::strcmp(field, "className") == 0) {
      return &static_cast<const T*>(stru)->className;
    }
    if (std::strcmp(field, "attributeName") == 0) {
      return &static_cast<const T*>(stru)->attributeName;
    }
    if (std::strcmp(field, "attributeType") == 0) {
      return &static_cast<const T*>(stru)->attributeType;
    }
    if (std::strcmp(field, "attributeValue") == 0) {
      return &static_cast<const T*>(stru)->attributeValue;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Data_Exchange_Platform::ObjectAttribute)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "instanceName") == 0) {
      static_cast<T*>(lhs)->instanceName = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "className") == 0) {
      static_cast<T*>(lhs)->className = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "attributeName") == 0) {
      static_cast<T*>(lhs)->attributeName = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "attributeType") == 0) {
      static_cast<T*>(lhs)->attributeType = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "attributeValue") == 0) {
      static_cast<T*>(lhs)->attributeValue = *static_cast<const CORBA::CharSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Data_Exchange_Platform::ObjectAttribute)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "instanceName") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->instanceName.in(), static_cast<const T*>(rhs)->instanceName.in());
    }
    if (std::strcmp(field, "className") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->className.in(), static_cast<const T*>(rhs)->className.in());
    }
    if (std::strcmp(field, "attributeName") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->attributeName.in(), static_cast<const T*>(rhs)->attributeName.in());
    }
    if (std::strcmp(field, "attributeType") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->attributeType.in(), static_cast<const T*>(rhs)->attributeType.in());
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Data_Exchange_Platform::ObjectAttribute)");
  }
};

template<>
const MetaStruct& getMetaStruct<Data_Exchange_Platform::ObjectAttribute>()
{
  static MetaStructImpl<Data_Exchange_Platform::ObjectAttribute> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser, Data_Exchange_Platform::ObjectAttribute*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<Data_Exchange_Platform::ObjectAttribute>().getValue(ser, "");
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: ObjectAttribute */


/* Begin STRUCT: InterationParameter */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Data_Exchange_Platform::InterationParameter& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.parameterName.in()) + 1;
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.parameterType.in()) + 1;
  gen_find_size(stru.parameterValue, size, padding);
}

bool operator<<(Serializer& strm, const Data_Exchange_Platform::InterationParameter& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.parameterName.in())
    && (strm << stru.parameterType.in())
    && (strm << stru.parameterValue);
}

bool operator>>(Serializer& strm, Data_Exchange_Platform::InterationParameter& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.parameterName.out())
    && (strm >> stru.parameterType.out())
    && (strm >> stru.parameterValue);
}

size_t gen_max_marshaled_size(const Data_Exchange_Platform::InterationParameter& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

size_t gen_max_marshaled_size(KeyOnly<const Data_Exchange_Platform::InterationParameter> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

void gen_find_size(KeyOnly<const Data_Exchange_Platform::InterationParameter> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.t.parameterName.in()) + 1;
}

bool operator<<(Serializer& strm, KeyOnly<const Data_Exchange_Platform::InterationParameter> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.t.parameterName.in());
}

bool operator>>(Serializer& strm, KeyOnly<Data_Exchange_Platform::InterationParameter> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.t.parameterName.out());
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Data_Exchange_Platform {
::DDS::DataWriter_ptr InterationParameterTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<InterationParameter> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}
::DDS::DataReader_ptr InterationParameterTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<InterationParameter> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}
#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr InterationParameterTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<InterationParameter> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<InterationParameter, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& InterationParameterTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<InterationParameter>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
bool InterationParameterTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}
const char* InterationParameterTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}
InterationParameterTypeSupport::_ptr_type InterationParameterTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<Data_Exchange_Platform::InterationParameter> : MetaStruct {
  typedef Data_Exchange_Platform::InterationParameter T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }
  size_t numDcpsKeys() const { return 1; }
#endif /* OPENDDS_NO_MULTI_TOPIC */

  Value getValue(const void* stru, const char* field) const
  {
    const Data_Exchange_Platform::InterationParameter& typed = *static_cast<const Data_Exchange_Platform::InterationParameter*>(stru);
    if (std::strcmp(field, "parameterName") == 0) {
      return typed.parameterName.in();
    }
    if (std::strcmp(field, "parameterType") == 0) {
      return typed.parameterType.in();
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Data_Exchange_Platform::InterationParameter)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "parameterName") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'parameterName' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'parameterName' length could not be deserialized");
      }
      if (!ser.skip(len)) {
        throw std::runtime_error("String 'parameterName' contents could not be skipped");
      }
    }
    if (std::strcmp(field, "parameterType") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'parameterType' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'parameterType' length could not be deserialized");
      }
      if (!ser.skip(len)) {
        throw std::runtime_error("String 'parameterType' contents could not be skipped");
      }
    }
    if (!gen_skip_over(ser, static_cast<CORBA::CharSeq*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct Data_Exchange_Platform::InterationParameter");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "parameterName") == 0) {
      return make_field_cmp(&T::parameterName, next);
    }
    if (std::strcmp(field, "parameterType") == 0) {
      return make_field_cmp(&T::parameterType, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Data_Exchange_Platform::InterationParameter)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"parameterName", "parameterType", "parameterValue", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "parameterName") == 0) {
      return &static_cast<const T*>(stru)->parameterName;
    }
    if (std::strcmp(field, "parameterType") == 0) {
      return &static_cast<const T*>(stru)->parameterType;
    }
    if (std::strcmp(field, "parameterValue") == 0) {
      return &static_cast<const T*>(stru)->parameterValue;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Data_Exchange_Platform::InterationParameter)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "parameterName") == 0) {
      static_cast<T*>(lhs)->parameterName = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "parameterType") == 0) {
      static_cast<T*>(lhs)->parameterType = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "parameterValue") == 0) {
      static_cast<T*>(lhs)->parameterValue = *static_cast<const CORBA::CharSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Data_Exchange_Platform::InterationParameter)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "parameterName") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->parameterName.in(), static_cast<const T*>(rhs)->parameterName.in());
    }
    if (std::strcmp(field, "parameterType") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->parameterType.in(), static_cast<const T*>(rhs)->parameterType.in());
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Data_Exchange_Platform::InterationParameter)");
  }
};

template<>
const MetaStruct& getMetaStruct<Data_Exchange_Platform::InterationParameter>()
{
  static MetaStructImpl<Data_Exchange_Platform::InterationParameter> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser, Data_Exchange_Platform::InterationParameter*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<Data_Exchange_Platform::InterationParameter>().getValue(ser, "");
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: InterationParameter */


/* Begin TYPEDEF: paramlst */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Data_Exchange_Platform::paramlst& seq, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(seq);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  if (seq.length() == 0) {
    return;
  }
  for (CORBA::ULong i = 0; i < seq.length(); ++i) {
    gen_find_size(seq[i], size, padding);
  }
}

bool operator<<(Serializer& strm, const Data_Exchange_Platform::paramlst& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  const CORBA::ULong length = seq.length();
  if (!(strm << length)) {
    return false;
  }
  if (length == 0) {
    return true;
  }
  for (CORBA::ULong i = 0; i < length; ++i) {
    if (!(strm << seq[i])) {
      return false;
    }
  }
  return true;
}

bool operator>>(Serializer& strm, Data_Exchange_Platform::paramlst& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  CORBA::ULong length;
  if (!(strm >> length)) {
    return false;
  }
  seq.length(length);
  for (CORBA::ULong i = 0; i < length; ++i) {
    if (!(strm >> seq[i])) {
      return false;
    }
  }
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Data_Exchange_Platform::paramlst*)
{
  ACE_UNUSED_ARG(ser);
  ACE_CDR::ULong length;
  if (!(ser >> length)) return false;
  for (ACE_CDR::ULong i = 0; i < length; ++i) {
    if (!gen_skip_over(ser, static_cast<Data_Exchange_Platform::InterationParameter*>(0))) return false;
  }
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: paramlst */


/* Begin STRUCT: Interation */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Data_Exchange_Platform::Interation& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += gen_max_marshaled_size(stru.timeStamp);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.interationName.in()) + 1;
  gen_find_size(stru.parameterList, size, padding);
}

bool operator<<(Serializer& strm, const Data_Exchange_Platform::Interation& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.timeStamp)
    && (strm << stru.interationName.in())
    && (strm << stru.parameterList);
}

bool operator>>(Serializer& strm, Data_Exchange_Platform::Interation& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.timeStamp)
    && (strm >> stru.interationName.out())
    && (strm >> stru.parameterList);
}

size_t gen_max_marshaled_size(const Data_Exchange_Platform::Interation& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

size_t gen_max_marshaled_size(KeyOnly<const Data_Exchange_Platform::Interation> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 8;
}

void gen_find_size(KeyOnly<const Data_Exchange_Platform::Interation> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += gen_max_marshaled_size(stru.t.timeStamp);
}

bool operator<<(Serializer& strm, KeyOnly<const Data_Exchange_Platform::Interation> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.t.timeStamp);
}

bool operator>>(Serializer& strm, KeyOnly<Data_Exchange_Platform::Interation> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.t.timeStamp);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Data_Exchange_Platform {
::DDS::DataWriter_ptr InterationTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<Interation> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}
::DDS::DataReader_ptr InterationTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Interation> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}
#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr InterationTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Interation> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<Interation, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& InterationTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<Interation>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
bool InterationTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}
const char* InterationTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}
InterationTypeSupport::_ptr_type InterationTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<Data_Exchange_Platform::Interation> : MetaStruct {
  typedef Data_Exchange_Platform::Interation T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }
  size_t numDcpsKeys() const { return 1; }
#endif /* OPENDDS_NO_MULTI_TOPIC */

  Value getValue(const void* stru, const char* field) const
  {
    const Data_Exchange_Platform::Interation& typed = *static_cast<const Data_Exchange_Platform::Interation*>(stru);
    if (std::strcmp(field, "timeStamp") == 0) {
      return typed.timeStamp;
    }
    if (std::strcmp(field, "interationName") == 0) {
      return typed.interationName.in();
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Data_Exchange_Platform::Interation)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "timeStamp") == 0) {
      ACE_CDR::LongLong val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'timeStamp' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 8)) {
        throw std::runtime_error("Field 'timeStamp' could not be skipped");
      }
    }
    if (std::strcmp(field, "interationName") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'interationName' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'interationName' length could not be deserialized");
      }
      if (!ser.skip(len)) {
        throw std::runtime_error("String 'interationName' contents could not be skipped");
      }
    }
    if (!gen_skip_over(ser, static_cast<Data_Exchange_Platform::paramlst*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct Data_Exchange_Platform::Interation");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "timeStamp") == 0) {
      return make_field_cmp(&T::timeStamp, next);
    }
    if (std::strcmp(field, "interationName") == 0) {
      return make_field_cmp(&T::interationName, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Data_Exchange_Platform::Interation)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"timeStamp", "interationName", "parameterList", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "timeStamp") == 0) {
      return &static_cast<const T*>(stru)->timeStamp;
    }
    if (std::strcmp(field, "interationName") == 0) {
      return &static_cast<const T*>(stru)->interationName;
    }
    if (std::strcmp(field, "parameterList") == 0) {
      return &static_cast<const T*>(stru)->parameterList;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Data_Exchange_Platform::Interation)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "timeStamp") == 0) {
      static_cast<T*>(lhs)->timeStamp = *static_cast<const CORBA::LongLong*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "interationName") == 0) {
      static_cast<T*>(lhs)->interationName = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "parameterList") == 0) {
      static_cast<T*>(lhs)->parameterList = *static_cast<const Data_Exchange_Platform::paramlst*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Data_Exchange_Platform::Interation)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "timeStamp") == 0) {
      return static_cast<const T*>(lhs)->timeStamp == static_cast<const T*>(rhs)->timeStamp;
    }
    if (std::strcmp(field, "interationName") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->interationName.in(), static_cast<const T*>(rhs)->interationName.in());
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Data_Exchange_Platform::Interation)");
  }
};

template<>
const MetaStruct& getMetaStruct<Data_Exchange_Platform::Interation>()
{
  static MetaStructImpl<Data_Exchange_Platform::Interation> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser, Data_Exchange_Platform::Interation*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<Data_Exchange_Platform::Interation>().getValue(ser, "");
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Interation */


/* Begin TYPEDEF: InterationList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Data_Exchange_Platform::InterationList& seq, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(seq);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  if (seq.length() == 0) {
    return;
  }
  for (CORBA::ULong i = 0; i < seq.length(); ++i) {
    gen_find_size(seq[i], size, padding);
  }
}

bool operator<<(Serializer& strm, const Data_Exchange_Platform::InterationList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  const CORBA::ULong length = seq.length();
  if (!(strm << length)) {
    return false;
  }
  if (length == 0) {
    return true;
  }
  for (CORBA::ULong i = 0; i < length; ++i) {
    if (!(strm << seq[i])) {
      return false;
    }
  }
  return true;
}

bool operator>>(Serializer& strm, Data_Exchange_Platform::InterationList& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  CORBA::ULong length;
  if (!(strm >> length)) {
    return false;
  }
  seq.length(length);
  for (CORBA::ULong i = 0; i < length; ++i) {
    if (!(strm >> seq[i])) {
      return false;
    }
  }
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Data_Exchange_Platform::InterationList*)
{
  ACE_UNUSED_ARG(ser);
  ACE_CDR::ULong length;
  if (!(ser >> length)) return false;
  for (ACE_CDR::ULong i = 0; i < length; ++i) {
    if (!gen_skip_over(ser, static_cast<Data_Exchange_Platform::Interation*>(0))) return false;
  }
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: InterationList */


/* Begin STRUCT: Interations */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Data_Exchange_Platform::Interations& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += gen_max_marshaled_size(stru.timeStamp);
  gen_find_size(stru.interationlst, size, padding);
}

bool operator<<(Serializer& strm, const Data_Exchange_Platform::Interations& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.timeStamp)
    && (strm << stru.interationlst);
}

bool operator>>(Serializer& strm, Data_Exchange_Platform::Interations& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.timeStamp)
    && (strm >> stru.interationlst);
}

size_t gen_max_marshaled_size(const Data_Exchange_Platform::Interations& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

size_t gen_max_marshaled_size(KeyOnly<const Data_Exchange_Platform::Interations> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

void gen_find_size(KeyOnly<const Data_Exchange_Platform::Interations> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
}

bool operator<<(Serializer& strm, KeyOnly<const Data_Exchange_Platform::Interations> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return true;
}

bool operator>>(Serializer& strm, KeyOnly<Data_Exchange_Platform::Interations> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Data_Exchange_Platform {
::DDS::DataWriter_ptr InterationsTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<Interations> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}
::DDS::DataReader_ptr InterationsTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Interations> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}
#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr InterationsTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Interations> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<Interations, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& InterationsTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<Interations>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
bool InterationsTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}
const char* InterationsTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}
InterationsTypeSupport::_ptr_type InterationsTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<Data_Exchange_Platform::Interations> : MetaStruct {
  typedef Data_Exchange_Platform::Interations T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }
  size_t numDcpsKeys() const { return 0; }
#endif /* OPENDDS_NO_MULTI_TOPIC */

  Value getValue(const void* stru, const char* field) const
  {
    const Data_Exchange_Platform::Interations& typed = *static_cast<const Data_Exchange_Platform::Interations*>(stru);
    if (std::strcmp(field, "timeStamp") == 0) {
      return typed.timeStamp;
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Data_Exchange_Platform::Interations)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "timeStamp") == 0) {
      ACE_CDR::LongLong val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'timeStamp' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 8)) {
        throw std::runtime_error("Field 'timeStamp' could not be skipped");
      }
    }
    if (!gen_skip_over(ser, static_cast<Data_Exchange_Platform::InterationList*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct Data_Exchange_Platform::Interations");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "timeStamp") == 0) {
      return make_field_cmp(&T::timeStamp, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Data_Exchange_Platform::Interations)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"timeStamp", "interationlst", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "timeStamp") == 0) {
      return &static_cast<const T*>(stru)->timeStamp;
    }
    if (std::strcmp(field, "interationlst") == 0) {
      return &static_cast<const T*>(stru)->interationlst;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Data_Exchange_Platform::Interations)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "timeStamp") == 0) {
      static_cast<T*>(lhs)->timeStamp = *static_cast<const CORBA::LongLong*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "interationlst") == 0) {
      static_cast<T*>(lhs)->interationlst = *static_cast<const Data_Exchange_Platform::InterationList*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Data_Exchange_Platform::Interations)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "timeStamp") == 0) {
      return static_cast<const T*>(lhs)->timeStamp == static_cast<const T*>(rhs)->timeStamp;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Data_Exchange_Platform::Interations)");
  }
};

template<>
const MetaStruct& getMetaStruct<Data_Exchange_Platform::Interations>()
{
  static MetaStructImpl<Data_Exchange_Platform::Interations> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser, Data_Exchange_Platform::Interations*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<Data_Exchange_Platform::Interations>().getValue(ser, "");
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Interations */

/* End MODULE: Data_Exchange_Platform */
