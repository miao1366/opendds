/* -*- C++ -*- */
/* Generated by D:\DEPSRC\DEPSRC\openDDS-v100\Win32\dds\bin\opendds_idl version 3.12 (ACE version 6.2a_p12) running on input file DataExchange.idl */
#ifndef OPENDDS_IDL_GENERATED_DATAEXCHANGETYPESUPPORTIMPL_H_HQOW12
#define OPENDDS_IDL_GENERATED_DATAEXCHANGETYPESUPPORTIMPL_H_HQOW12
#include "DataExchangeC.h"
#include "dds/DCPS/Definitions.h"
#include "dds/DdsDcpsC.h"
#include "DataExchangeTypeSupportC.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DCPS/TypeSupportImpl.h"
#include "dds/DdsDcpsCoreC.h"
#include "tao/CharSeqC.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: StringSeq */


/* End TYPEDEF: StringSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: LongSeq */


/* End TYPEDEF: LongSeq */

/* End MODULE: CORBA */


/* Begin MODULE: DDS */



/* Begin TYPEDEF: StringSeq */


/* End TYPEDEF: StringSeq */


/* Begin TYPEDEF: InstanceHandle_t */


/* End TYPEDEF: InstanceHandle_t */


/* Begin TYPEDEF: BuiltinTopicKeyValue */


/* End TYPEDEF: BuiltinTopicKeyValue */


/* Begin TYPEDEF: InstanceHandleSeq */


/* End TYPEDEF: InstanceHandleSeq */


/* Begin TYPEDEF: QosPolicyId_t */


/* End TYPEDEF: QosPolicyId_t */


/* Begin STRUCT: QosPolicyCount */


/* End STRUCT: QosPolicyCount */


/* Begin TYPEDEF: QosPolicyCountSeq */


/* End TYPEDEF: QosPolicyCountSeq */


/* Begin TYPEDEF: OctetSeq */


/* End TYPEDEF: OctetSeq */


/* Begin STRUCT: Duration_t */


/* End STRUCT: Duration_t */


/* Begin CONST: DURATION_INFINITE_SEC */


/* End CONST: DURATION_INFINITE_SEC */


/* Begin CONST: DURATION_INFINITE_NSEC */


/* End CONST: DURATION_INFINITE_NSEC */


/* Begin CONST: DURATION_ZERO_SEC */


/* End CONST: DURATION_ZERO_SEC */


/* Begin CONST: DURATION_ZERO_NSEC */


/* End CONST: DURATION_ZERO_NSEC */


/* Begin STRUCT: UserDataQosPolicy */


/* End STRUCT: UserDataQosPolicy */


/* Begin STRUCT: GroupDataQosPolicy */


/* End STRUCT: GroupDataQosPolicy */


/* Begin STRUCT: TopicDataQosPolicy */


/* End STRUCT: TopicDataQosPolicy */


/* Begin STRUCT: PartitionQosPolicy */


/* End STRUCT: PartitionQosPolicy */


/* Begin ENUM: HistoryQosPolicyKind */


/* End ENUM: HistoryQosPolicyKind */


/* Begin ENUM: DurabilityQosPolicyKind */


/* End ENUM: DurabilityQosPolicyKind */


/* Begin STRUCT: DurabilityQosPolicy */


/* End STRUCT: DurabilityQosPolicy */


/* Begin STRUCT: DurabilityServiceQosPolicy */


/* End STRUCT: DurabilityServiceQosPolicy */


/* Begin STRUCT: DeadlineQosPolicy */


/* End STRUCT: DeadlineQosPolicy */


/* Begin STRUCT: LatencyBudgetQosPolicy */


/* End STRUCT: LatencyBudgetQosPolicy */


/* Begin ENUM: LivelinessQosPolicyKind */


/* End ENUM: LivelinessQosPolicyKind */


/* Begin STRUCT: LivelinessQosPolicy */


/* End STRUCT: LivelinessQosPolicy */


/* Begin ENUM: ReliabilityQosPolicyKind */


/* End ENUM: ReliabilityQosPolicyKind */


/* Begin STRUCT: ReliabilityQosPolicy */


/* End STRUCT: ReliabilityQosPolicy */


/* Begin ENUM: DestinationOrderQosPolicyKind */


/* End ENUM: DestinationOrderQosPolicyKind */


/* Begin STRUCT: DestinationOrderQosPolicy */


/* End STRUCT: DestinationOrderQosPolicy */


/* Begin STRUCT: HistoryQosPolicy */


/* End STRUCT: HistoryQosPolicy */


/* Begin STRUCT: ResourceLimitsQosPolicy */


/* End STRUCT: ResourceLimitsQosPolicy */


/* Begin STRUCT: TransportPriorityQosPolicy */


/* End STRUCT: TransportPriorityQosPolicy */


/* Begin STRUCT: LifespanQosPolicy */


/* End STRUCT: LifespanQosPolicy */


/* Begin ENUM: OwnershipQosPolicyKind */


/* End ENUM: OwnershipQosPolicyKind */


/* Begin STRUCT: OwnershipQosPolicy */


/* End STRUCT: OwnershipQosPolicy */


/* Begin STRUCT: OwnershipStrengthQosPolicy */


/* End STRUCT: OwnershipStrengthQosPolicy */


/* Begin ENUM: PresentationQosPolicyAccessScopeKind */


/* End ENUM: PresentationQosPolicyAccessScopeKind */


/* Begin STRUCT: PresentationQosPolicy */


/* End STRUCT: PresentationQosPolicy */


/* Begin STRUCT: TimeBasedFilterQosPolicy */


/* End STRUCT: TimeBasedFilterQosPolicy */


/* Begin STRUCT: TopicQos */


/* End STRUCT: TopicQos */


/* Begin STRUCT: WriterDataLifecycleQosPolicy */


/* End STRUCT: WriterDataLifecycleQosPolicy */


/* Begin STRUCT: DataWriterQos */


/* End STRUCT: DataWriterQos */


/* Begin STRUCT: EntityFactoryQosPolicy */


/* End STRUCT: EntityFactoryQosPolicy */


/* Begin STRUCT: PublisherQos */


/* End STRUCT: PublisherQos */


/* Begin STRUCT: ReaderDataLifecycleQosPolicy */


/* End STRUCT: ReaderDataLifecycleQosPolicy */


/* Begin STRUCT: DataReaderQos */


/* End STRUCT: DataReaderQos */


/* Begin STRUCT: SubscriberQos */


/* End STRUCT: SubscriberQos */


/* Begin STRUCT: DomainParticipantFactoryQos */


/* End STRUCT: DomainParticipantFactoryQos */


/* Begin STRUCT: DomainParticipantQos */


/* End STRUCT: DomainParticipantQos */


/* Begin STRUCT: BuiltinTopicKey_t */


/* End STRUCT: BuiltinTopicKey_t */


/* Begin STRUCT: ParticipantBuiltinTopicData */


/* End STRUCT: ParticipantBuiltinTopicData */


/* Begin STRUCT: PublicationBuiltinTopicData */


/* End STRUCT: PublicationBuiltinTopicData */


/* Begin STRUCT: SubscriptionBuiltinTopicData */


/* End STRUCT: SubscriptionBuiltinTopicData */


/* Begin STRUCT: TopicBuiltinTopicData */


/* End STRUCT: TopicBuiltinTopicData */


/* Begin TYPEDEF: SampleStateKind */


/* End TYPEDEF: SampleStateKind */


/* Begin CONST: READ_SAMPLE_STATE */


/* End CONST: READ_SAMPLE_STATE */


/* Begin CONST: NOT_READ_SAMPLE_STATE */


/* End CONST: NOT_READ_SAMPLE_STATE */


/* Begin TYPEDEF: SampleStateMask */


/* End TYPEDEF: SampleStateMask */


/* Begin CONST: ANY_SAMPLE_STATE */


/* End CONST: ANY_SAMPLE_STATE */


/* Begin TYPEDEF: ViewStateKind */


/* End TYPEDEF: ViewStateKind */


/* Begin CONST: NEW_VIEW_STATE */


/* End CONST: NEW_VIEW_STATE */


/* Begin CONST: NOT_NEW_VIEW_STATE */


/* End CONST: NOT_NEW_VIEW_STATE */


/* Begin TYPEDEF: ViewStateMask */


/* End TYPEDEF: ViewStateMask */


/* Begin CONST: ANY_VIEW_STATE */


/* End CONST: ANY_VIEW_STATE */


/* Begin TYPEDEF: InstanceStateKind */


/* End TYPEDEF: InstanceStateKind */


/* Begin CONST: ALIVE_INSTANCE_STATE */


/* End CONST: ALIVE_INSTANCE_STATE */


/* Begin CONST: NOT_ALIVE_DISPOSED_INSTANCE_STATE */


/* End CONST: NOT_ALIVE_DISPOSED_INSTANCE_STATE */


/* Begin CONST: NOT_ALIVE_NO_WRITERS_INSTANCE_STATE */


/* End CONST: NOT_ALIVE_NO_WRITERS_INSTANCE_STATE */


/* Begin TYPEDEF: InstanceStateMask */


/* End TYPEDEF: InstanceStateMask */


/* Begin CONST: ANY_INSTANCE_STATE */


/* End CONST: ANY_INSTANCE_STATE */


/* Begin CONST: NOT_ALIVE_INSTANCE_STATE */


/* End CONST: NOT_ALIVE_INSTANCE_STATE */


/* Begin STRUCT: Time_t */


/* End STRUCT: Time_t */


/* Begin CONST: TIME_INVALID_SEC */


/* End CONST: TIME_INVALID_SEC */


/* Begin CONST: TIME_INVALID_NSEC */


/* End CONST: TIME_INVALID_NSEC */


/* Begin STRUCT: SampleInfo */


/* End STRUCT: SampleInfo */


/* Begin TYPEDEF: SampleInfoSeq */


/* End TYPEDEF: SampleInfoSeq */

/* End MODULE: DDS */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: CharSeq */


/* End TYPEDEF: CharSeq */

/* End MODULE: CORBA */


/* Begin MODULE: Data_Exchange_Platform */



/* Begin STRUCT: ObjectAttribute */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Data_Exchange_Platform::ObjectAttribute& stru, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, const Data_Exchange_Platform::ObjectAttribute& stru);

bool operator>>(Serializer& strm, Data_Exchange_Platform::ObjectAttribute& stru);

size_t gen_max_marshaled_size(const Data_Exchange_Platform::ObjectAttribute& stru, bool align);

size_t gen_max_marshaled_size(KeyOnly<const Data_Exchange_Platform::ObjectAttribute> stru, bool align);

void gen_find_size(KeyOnly<const Data_Exchange_Platform::ObjectAttribute> stru, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, KeyOnly<const Data_Exchange_Platform::ObjectAttribute> stru);

bool operator>>(Serializer& strm, KeyOnly<Data_Exchange_Platform::ObjectAttribute> stru);

template <>
struct MarshalTraits<Data_Exchange_Platform::ObjectAttribute> {
  static bool gen_is_bounded_size() { return false; }
  static bool gen_is_bounded_key_size() { return false; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Data_Exchange_Platform {
// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct  ObjectAttribute_OpenDDS_KeyLessThan {
  bool operator()(const Data_Exchange_Platform::ObjectAttribute& v1, const Data_Exchange_Platform::ObjectAttribute& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.instanceName < v2.instanceName) return true;
    if (v2.instanceName < v1.instanceName) return false;
    return false;
  }
};
}


namespace Data_Exchange_Platform {
class ObjectAttributeTypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<Data_Exchange_Platform::ObjectAttribute> {
  typedef Data_Exchange_Platform::ObjectAttribute MessageType;
  typedef Data_Exchange_Platform::ObjectAttributeSeq MessageSequenceType;
  typedef Data_Exchange_Platform::ObjectAttributeTypeSupport TypeSupportType;
  typedef Data_Exchange_Platform::ObjectAttributeTypeSupportImpl TypeSupportTypeImpl;
  typedef Data_Exchange_Platform::ObjectAttributeDataWriter DataWriterType;
  typedef Data_Exchange_Platform::ObjectAttributeDataReader DataReaderType;
  typedef Data_Exchange_Platform::ObjectAttribute_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "Data_Exchange_Platform::ObjectAttribute"; }
  static bool gen_has_key () { return true; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Data_Exchange_Platform {
class  ObjectAttributeTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<ObjectAttributeTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<ObjectAttribute> TraitsType;
  typedef ObjectAttributeTypeSupport TypeSupportType;
  typedef ObjectAttributeTypeSupport::_var_type _var_type;
  typedef ObjectAttributeTypeSupport::_ptr_type _ptr_type;

  ObjectAttributeTypeSupportImpl() {}
  virtual ~ObjectAttributeTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static ObjectAttributeTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
const MetaStruct& getMetaStruct<Data_Exchange_Platform::ObjectAttribute>();
bool gen_skip_over(Serializer& ser, Data_Exchange_Platform::ObjectAttribute*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: ObjectAttribute */


/* Begin STRUCT: InterationParameter */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Data_Exchange_Platform::InterationParameter& stru, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, const Data_Exchange_Platform::InterationParameter& stru);

bool operator>>(Serializer& strm, Data_Exchange_Platform::InterationParameter& stru);

size_t gen_max_marshaled_size(const Data_Exchange_Platform::InterationParameter& stru, bool align);

size_t gen_max_marshaled_size(KeyOnly<const Data_Exchange_Platform::InterationParameter> stru, bool align);

void gen_find_size(KeyOnly<const Data_Exchange_Platform::InterationParameter> stru, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, KeyOnly<const Data_Exchange_Platform::InterationParameter> stru);

bool operator>>(Serializer& strm, KeyOnly<Data_Exchange_Platform::InterationParameter> stru);

template <>
struct MarshalTraits<Data_Exchange_Platform::InterationParameter> {
  static bool gen_is_bounded_size() { return false; }
  static bool gen_is_bounded_key_size() { return false; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Data_Exchange_Platform {
// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct  InterationParameter_OpenDDS_KeyLessThan {
  bool operator()(const Data_Exchange_Platform::InterationParameter& v1, const Data_Exchange_Platform::InterationParameter& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.parameterName < v2.parameterName) return true;
    if (v2.parameterName < v1.parameterName) return false;
    return false;
  }
};
}


namespace Data_Exchange_Platform {
class InterationParameterTypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<Data_Exchange_Platform::InterationParameter> {
  typedef Data_Exchange_Platform::InterationParameter MessageType;
  typedef Data_Exchange_Platform::InterationParameterSeq MessageSequenceType;
  typedef Data_Exchange_Platform::InterationParameterTypeSupport TypeSupportType;
  typedef Data_Exchange_Platform::InterationParameterTypeSupportImpl TypeSupportTypeImpl;
  typedef Data_Exchange_Platform::InterationParameterDataWriter DataWriterType;
  typedef Data_Exchange_Platform::InterationParameterDataReader DataReaderType;
  typedef Data_Exchange_Platform::InterationParameter_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "Data_Exchange_Platform::InterationParameter"; }
  static bool gen_has_key () { return true; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Data_Exchange_Platform {
class  InterationParameterTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<InterationParameterTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<InterationParameter> TraitsType;
  typedef InterationParameterTypeSupport TypeSupportType;
  typedef InterationParameterTypeSupport::_var_type _var_type;
  typedef InterationParameterTypeSupport::_ptr_type _ptr_type;

  InterationParameterTypeSupportImpl() {}
  virtual ~InterationParameterTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static InterationParameterTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
const MetaStruct& getMetaStruct<Data_Exchange_Platform::InterationParameter>();
bool gen_skip_over(Serializer& ser, Data_Exchange_Platform::InterationParameter*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: InterationParameter */


/* Begin TYPEDEF: paramlst */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Data_Exchange_Platform::paramlst& seq, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, const Data_Exchange_Platform::paramlst& seq);

bool operator>>(Serializer& strm, Data_Exchange_Platform::paramlst& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Data_Exchange_Platform::paramlst*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: paramlst */


/* Begin STRUCT: Interation */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Data_Exchange_Platform::Interation& stru, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, const Data_Exchange_Platform::Interation& stru);

bool operator>>(Serializer& strm, Data_Exchange_Platform::Interation& stru);

size_t gen_max_marshaled_size(const Data_Exchange_Platform::Interation& stru, bool align);

size_t gen_max_marshaled_size(KeyOnly<const Data_Exchange_Platform::Interation> stru, bool align);

void gen_find_size(KeyOnly<const Data_Exchange_Platform::Interation> stru, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, KeyOnly<const Data_Exchange_Platform::Interation> stru);

bool operator>>(Serializer& strm, KeyOnly<Data_Exchange_Platform::Interation> stru);

template <>
struct MarshalTraits<Data_Exchange_Platform::Interation> {
  static bool gen_is_bounded_size() { return false; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Data_Exchange_Platform {
// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct  Interation_OpenDDS_KeyLessThan {
  bool operator()(const Data_Exchange_Platform::Interation& v1, const Data_Exchange_Platform::Interation& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.timeStamp < v2.timeStamp) return true;
    if (v2.timeStamp < v1.timeStamp) return false;
    return false;
  }
};
}


namespace Data_Exchange_Platform {
class InterationTypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<Data_Exchange_Platform::Interation> {
  typedef Data_Exchange_Platform::Interation MessageType;
  typedef Data_Exchange_Platform::InterationSeq MessageSequenceType;
  typedef Data_Exchange_Platform::InterationTypeSupport TypeSupportType;
  typedef Data_Exchange_Platform::InterationTypeSupportImpl TypeSupportTypeImpl;
  typedef Data_Exchange_Platform::InterationDataWriter DataWriterType;
  typedef Data_Exchange_Platform::InterationDataReader DataReaderType;
  typedef Data_Exchange_Platform::Interation_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "Data_Exchange_Platform::Interation"; }
  static bool gen_has_key () { return true; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Data_Exchange_Platform {
class  InterationTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<InterationTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<Interation> TraitsType;
  typedef InterationTypeSupport TypeSupportType;
  typedef InterationTypeSupport::_var_type _var_type;
  typedef InterationTypeSupport::_ptr_type _ptr_type;

  InterationTypeSupportImpl() {}
  virtual ~InterationTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static InterationTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
const MetaStruct& getMetaStruct<Data_Exchange_Platform::Interation>();
bool gen_skip_over(Serializer& ser, Data_Exchange_Platform::Interation*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Interation */


/* Begin TYPEDEF: InterationList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Data_Exchange_Platform::InterationList& seq, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, const Data_Exchange_Platform::InterationList& seq);

bool operator>>(Serializer& strm, Data_Exchange_Platform::InterationList& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, Data_Exchange_Platform::InterationList*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: InterationList */


/* Begin STRUCT: Interations */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Data_Exchange_Platform::Interations& stru, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, const Data_Exchange_Platform::Interations& stru);

bool operator>>(Serializer& strm, Data_Exchange_Platform::Interations& stru);

size_t gen_max_marshaled_size(const Data_Exchange_Platform::Interations& stru, bool align);

size_t gen_max_marshaled_size(KeyOnly<const Data_Exchange_Platform::Interations> stru, bool align);

void gen_find_size(KeyOnly<const Data_Exchange_Platform::Interations> stru, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, KeyOnly<const Data_Exchange_Platform::Interations> stru);

bool operator>>(Serializer& strm, KeyOnly<Data_Exchange_Platform::Interations> stru);

template <>
struct MarshalTraits<Data_Exchange_Platform::Interations> {
  static bool gen_is_bounded_size() { return false; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Data_Exchange_Platform {
// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct  Interations_OpenDDS_KeyLessThan {
  bool operator()(const Data_Exchange_Platform::Interations&, const Data_Exchange_Platform::Interations&) const
  {
    // Eith no DCPS_DATA_KEYs, return false
    // to allow use of map with just one entry
    return false;
  }
};
}


namespace Data_Exchange_Platform {
class InterationsTypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<Data_Exchange_Platform::Interations> {
  typedef Data_Exchange_Platform::Interations MessageType;
  typedef Data_Exchange_Platform::InterationsSeq MessageSequenceType;
  typedef Data_Exchange_Platform::InterationsTypeSupport TypeSupportType;
  typedef Data_Exchange_Platform::InterationsTypeSupportImpl TypeSupportTypeImpl;
  typedef Data_Exchange_Platform::InterationsDataWriter DataWriterType;
  typedef Data_Exchange_Platform::InterationsDataReader DataReaderType;
  typedef Data_Exchange_Platform::Interations_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "Data_Exchange_Platform::Interations"; }
  static bool gen_has_key () { return false; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Data_Exchange_Platform {
class  InterationsTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<InterationsTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<Interations> TraitsType;
  typedef InterationsTypeSupport TypeSupportType;
  typedef InterationsTypeSupport::_var_type _var_type;
  typedef InterationsTypeSupport::_ptr_type _ptr_type;

  InterationsTypeSupportImpl() {}
  virtual ~InterationsTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static InterationsTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
const MetaStruct& getMetaStruct<Data_Exchange_Platform::Interations>();
bool gen_skip_over(Serializer& ser, Data_Exchange_Platform::Interations*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Interations */

/* End MODULE: Data_Exchange_Platform */
#endif /* OPENDDS_IDL_GENERATED_DATAEXCHANGETYPESUPPORTIMPL_H_HQOW12 */
